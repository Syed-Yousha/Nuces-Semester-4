
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

// Structure representing the state of a spin lock
struct spin_lock_state {
    volatile unsigned int g1;
    volatile unsigned int g2;
};

// Function prototypes
void spin_lock(struct spin_lock_state *state, int locker_id);
void spin_unlock(struct spin_lock_state *state, int locker_id);
struct spin_lock_state *spin_allocate(key_t key);

// Function to lock the spin lock
void spin_lock(struct spin_lock_state *state, int locker_id) {
    printf("Locker %d attempting to acquire the lock...\n", locker_id);
    // Continuously spin until the lock is acquired
    while (1) {
        // Check if the lock is available
        if (state->g2 == locker_id) {
            // Lock acquired
            printf("Locker %d acquired the lock!\n", locker_id);
            return;
        }
        // Busy-waiting...
    }
}

// Function to unlock the spin lock
void spin_unlock(struct spin_lock_state *state, int locker_id) {
    // Release the lock
    state->g2 = 0;
    printf("Locker %d released the lock.\n", locker_id);
}

// Function to allocate shared memory for the spin lock state
struct spin_lock_state *spin_allocate(key_t key) {
    int shmid;

    // Create or attach to the shared memory segment
    if ((shmid = shmget(key, sizeof(struct spin_lock_state), IPC_CREAT | 0666)) == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach to the shared memory segment to get a pointer to it
    struct spin_lock_state *data = shmat(shmid, NULL, 0);
    if (data == (struct spin_lock_state *)(-1)) {
        perror("shmat");
        exit(1);
    }

    // Initialize the spin lock state
    data->g1 = 0;
    data->g2 = 0;

    return data;
}

int main(int argc, char *argv[]) {
    // Check for correct number of command-line arguments
    if (argc != 3) {
        fprintf(stderr, "Usage: %s [keyfile] [lockerid]\n", argv[0]);
        exit(1);
    }

    // Get the key
    key_t key;
    if ((key = ftok(argv[1], 'R')) == -1) {
        perror("ftok");
        exit(1);
    }

    // Allocate shared memory for the spin lock state
    struct spin_lock_state *state = spin_allocate(key);

    // Convert locker id from string to integer
    int locker_id = atoi(argv[2]);

    // Attempt to lock the spin lock
    spin_lock(state, locker_id);

    // Simulate some work by sleeping for 5 seconds
    printf("Locker %d is doing some important work...\n", locker_id);
    sleep(5);

    // Release the lock
    spin_unlock(state, locker_id);

    // Detach from shared memory
    if (shmdt(state) == -1) {
        perror("shmdt");
        exit(1);
    }

    return 0;
}
